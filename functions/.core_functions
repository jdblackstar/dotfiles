#!/bin/bash

function batch_rename() {
    local pattern="$1"
    local replacement="$2"
    for file in *; do
        mv "$file" "${file//$pattern/$replacement}"
    done
}

function dcd() {
    local dir_to_delete=$(pwd)
    cd ..
    echo "Are you sure you want to delete $dir_to_delete? [y/N]"
    read -r response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
    then
        rm -rf "$dir_to_delete"
		echo "$dir_to_delete deleted.
    else
        echo "Operation cancelled."
    fi
}

function ikill() {
    ps aux | grep -v "grep" | grep "$1" | awk '{print $2, $11}' | fzf | awk '{print $1}' | xargs kill -9
}

function mkd() {
	mkdir -p "$@" && cd "$_";
}

function search_replace() {
    local search="$1"
    local replace="$2"
    grep -rl "$search" . | xargs sed -i "s/$search/$replace/g"
}

function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}